
" ======================================
" Champok Das .vimrc file
" ======================================
"
"
scriptencoding utf-8
set encoding=utf-8
let mapleader=" "
nnoremap <leader>c :noh<CR>

map <F3> :GoFmt<CR>
" What the fuck is Ex mode?
nnoremap Q <nop>
nnoremap gy gT
" I like seeing where I came from
map <PageDown> <C-d>zz
map <PageUp> <C-u>zz
imap <PageDown> <C-o><C-d><C-o>zz
imap <PageUp> <C-o><C-u><C-o>zz
nnoremap G Gzz
nnoremap gf <C-w>vgf

" Quicker window movement in normal mode
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

set list
set listchars=tab:\ \ ,trail:·,extends:>

set noerrorbells
set novisualbell
set belloff=all

set number
set rnu

set textwidth=150
set ruler

set hlsearch
set smartcase
set ignorecase
set incsearch
set showmatch

set autoindent

set expandtab
set shiftwidth=2
set smartindent
set smarttab
set softtabstop=2

set tabpagemax=100

set laststatus=2

set nowrap

set backspace=indent,eol,start

set showmode
set lazyredraw
set cursorline
set numberwidth=6
nmap ; :

set nocompatible

set tags=./tags;/

if (has("nvim"))
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
endif
if (has("termguicolors"))
  " Sometimes may need to use this in when using PuTTy + tmux
  " set Vim-specific sequences for RGB colors
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif

syntax on
set title
set titleold=
filetype on
filetype plugin indent on

set swapfile
set dir=/tmp

" Vundle stuff
set rtp+=~/.vim/bundle/Vundle.vim
try
  call vundle#begin()

  Plugin 'VundleVim/Vundle.vim'
  Plugin 'preservim/nerdtree'
  Plugin 'joshdick/onedark.vim'
  Plugin 'sheerun/vim-polyglot'
  call vundle#end()
catch /^Vim\%((\a\+)\)\=:E117/
  " Do nothing
endtry

try
  colorscheme onedark
catch /^Vim\%((\a\+)\)\=:E185/
  colorscheme desert
endtry

let g:jedi#use_splits_not_buffers="right"
let g:jedi#popup_select_first=0
let g:jedi#show_call_signatures=1
let g:multi_cursor_quit_key = '<Esc>'

if exists("NERDTreeTogge")
  map<C-o> :NERDTreeToggle<CR>
endif

autocmd FileType python setlocal completeopt-=preview
if exists("NERDTree")
  autocmd VimEnter * NERDTree " open NERDTree on startup
  autocmd VimEnter * wincmd w " jump to active window on startup
  let NERDTreeShowHidden=1 " always show hidden files
endif

autocmd VimResized * wincmd *

autocmd FileType make set noexpandtab shiftwidth=8 softtabstop=0

set wildmenu
set wildmode=list:longest
"set wildmenu=longest:list,full
set wildignore+=*.o,*.obj,*~
set wildignore+=*vim/backups*

set history=1000
set diffopt+=vertical
set splitright

set cc=80,100,120,150
set modelines=0
set gdefault

function! GenTags()
  let curPath = g:NERDTree.ForCurrentTab().getRoot().path.str()
  exec ':!ctags --extra=+f -R -f ' . curPath . '/tags ' . curPath
endfunction

nmap <silent> <leader>r :argdel *<CR>:bufdo argadd %<CR>:%bd<CR>:argdo e<CR><CR>:b 1<CR>

nmap <silent> <F1> :call GenTags()<CR>

if !empty(glob("~/.vim/bundle/nerdtree"))
  map<leader>o :NERDTreeToggle<CR>
else
  map<leader>o :Lex<CR>
endif

au InsertEnter * hi User1 ctermfg=232 ctermbg=166 guifg=#080808 guibg=#ffff00 
au InsertLeave * hi User1 ctermfg=232 ctermbg=239 guifg=#adadad guibg=#4e4e4e 

au InsertEnter * hi statusline ctermfg=232 ctermbg=166 guifg=black guibg=#ff0000
au InsertLeave * hi statusline ctermfg=232 ctermbg=239 guifg=black guibg=#5fff5f

hi statusline ctermfg=239 ctermbg=239 guifg=black guibg=#5fff5f


if exists("+showtabline")
	function! MyTabLine()
			let s = ''
			let t = tabpagenr()
			let i = 1
			while i <= tabpagenr('$')
					let buflist = tabpagebuflist(i)
					let winnr = tabpagewinnr(i)
					let s .= '%' . i . 'T'
					let s .= (i == t ? '%1*' : '%2*')

					" let s .= (i == t ? '%#TabLineSel#' : '%#TabLine#')
					" let s .= ' '
					let s .= (i == t ? '%#User1#' : '%#User0#')
					let s .= ' ' . i . ' '
					let s .= (i == t ? '%#User1#' : '%#TabLine#')

					let bufnr = buflist[winnr - 1]
					let file = bufname(bufnr)
					let buftype = getbufvar(bufnr, '&buftype')

					if buftype == 'help'
							let file = 'help:' . fnamemodify(file, ':t:r')

					elseif buftype == 'quickfix'
							let file = 'quickfix'

					elseif buftype == 'nofile'
							if file =~ '\/.'
									let file = substitute(file, '.*\/\ze.', '', '')
							endif

					else
							let file = pathshorten(fnamemodify(file, ':p:~:.'))
							if getbufvar(bufnr, '&modified')
									let file = '+' . file
							endif

					endif

					if file == ''
							let file = '[No Name]'
					endif

					let s .= '' . file

					let nwins = tabpagewinnr(i, '$')
					if nwins > 1
							let modified = ''
							for b in buflist
									if getbufvar(b, '&modified') && b != bufnr
											let modified = '*'
											break
									endif
							endfor
							let hl = (i == t ? '%#User1#' : '%#User0#')
							let nohl = (i == t ? '%#TabLineSel#' : '%#TabLine#')
							let s .= ' ' . modified . '(' . hl . winnr . nohl . '/' . nwins . ')'
					endif

					if i < tabpagenr('$')
							let s .= '%#TabLine#'
					else
							let s .= ''
					endif

					let i = i + 1

			endwhile

			let s .= '%T%#TabLineFill#%='
			let s .= (tabpagenr('$') > 1 ? '%999XX' : 'X')
			return s

	endfunction

	set showtabline=2

	set tabline=%!MyTabLine()
endif

" Status line
" default: set statusline=%f\ %h%w%m%r\ %=%(%l,%c%V\ %=\ %P%)

" Status Line Custom
let g:currentmode={
    \ 'n'      : 'Normal',
    \ 'no'     : 'Normal·Operator Pending',
    \ 'v'      : 'Visual',
    \ 'V'      : 'V·Line',
    \ "\<C-v>" : 'V·Block',
    \ 's'      : 'Select',
    \ 'S'      : 'S·Line',
    \ "\<C-s>" : 'S·Block',
    \ 'i'      : 'Insert',
    \ 'R'      : 'Replace',
    \ 'Rv'     : 'V·Replace',
    \ 'c'      : 'Command',
    \ 'cv'     : 'Vim Ex',
    \ 'ce'     : 'Ex',
    \ 'r'      : 'Prompt',
    \ 'rm'     : 'More',
    \ 'r?'     : 'Confirm',
    \ '!'      : 'Shell',
    \ 't'      : 'Terminal'
    \}

set laststatus=2
set statusline=
set statusline+=%0*\ %n\                                 " Buffer number
set statusline+=%1*\ %{getcwd()}\ \|                     " Work Dir
set statusline+=%1*\ %<%f%m%r%h%w\                       " File path, modified, readonly, helpfile, preview
set statusline+=%1*\                                     " Reset
set statusline+=%3*|                                     " Separator
set statusline+=%2*\ %Y\                                 " FileType
set statusline+=%3*|                                     " Separator
set statusline+=%2*\ %{''.(&fenc!=''?&fenc:&enc).''}     " Encoding
set statusline+=\ (%{&ff})                               " FileFormat (dos/unix..)
set statusline+=%=                                       " Right Side
set statusline+=%2*\ C:%02v                              " Colomn number
set statusline+=%3*|                                     " Separator
set statusline+=%1*\ %02l/%L\                            " Line number / total lines, percentage of document
set statusline+=%0*\ %{toupper(g:currentmode[mode()])}\  " The current mode

hi User0 ctermfg=232 ctermbg=239 guibg=#4e4e4e guifg=#000000
hi User1 ctermfg=239 ctermbg=239 guibg=#4e4e4e guifg=#adadad
hi User2 ctermfg=239 ctermbg=236 guibg=#303030 guifg=#adadad
hi User3 ctermfg=232 ctermbg=236 guibg=#303030 guifg=#303030
hi User4 ctermfg=232 ctermbg=239 guibg=#4e4e4e guifg=#4e4e4e

set clipboard=unnamedplus

set path+=**
" ▶
" ◀
set modelines=0
set gdefault
set undodir=~/.vim/undo/
set undofile
