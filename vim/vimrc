
" ======================================
" Champok Das .vimrc file
" ======================================
"
"
let g:polyglot_disabled = []
scriptencoding utf-8
set encoding=utf-8
let mapleader=" "
nnoremap <leader>c :noh<CR>
nnoremap <leader>dtw :call TrimWhiteSpace()<CR>
map <F9> :bprevious<CR>
map <F10> :bnext<CR>

" What the fuck is Ex mode?
nnoremap Q <nop>
nnoremap gy gT
" I like seeing where I came from
map <PageDown> <C-d>zz
map <PageUp> <C-u>zz
imap <PageDown> <C-o><C-d><C-o>zz
imap <PageUp> <C-o><C-u><C-o>zz
nnoremap <F11> :ls<cr>:b<space>
nnoremap G Gzz
nnoremap gf <C-w>vgf


" Quicker window movement in normal mode
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

set list
set listchars=tab:\ \ ,trail:·,extends:>

set noerrorbells
set novisualbell
set belloff=all

"set number
"set rnu

"set textwidth=250
set ruler

set hlsearch
set smartcase
set ignorecase
set incsearch
set noshowmatch

set autoindent

set expandtab
set shiftwidth=2
set smartindent
set smarttab
set softtabstop=2

set tabpagemax=100

set laststatus=2

set nowrap

set backspace=indent,eol,start

set scrolljump=5
set showmode
set lazyredraw
set nocursorline
set nocursorcolumn
set numberwidth=6
"set synmaxcol=250
nmap ; :

set nocompatible

"set tags=./tags;/

if (has("nvim"))
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
endif
if (has("termguicolors"))
  " Sometimes may need to use this in when using PuTTy + tmux
  " set Vim-specific sequences for RGB colors
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif

syntax on
set title
set titleold=
filetype on
filetype plugin indent on

set swapfile
set dir=/tmp

" Vundle stuff
set rtp+=~/.vim/bundle/Vundle.vim
try
  call vundle#begin()

  Plugin 'VundleVim/Vundle.vim'
  Plugin 'preservim/nerdtree'
  Plugin 'joshdick/onedark.vim'
  Plugin 'sheerun/vim-polyglot'
  Plugin 'wellle/tmux-complete.vim'
  call vundle#end()
catch /^Vim\%((\a\+)\)\=:E117/
  " Do nothing
endtry

try
  colorscheme onedark
catch /^Vim\%((\a\+)\)\=:E185/
  colorscheme desert
endtry

let g:jedi#use_splits_not_buffers="right"
let g:jedi#popup_select_first=0
let g:jedi#show_call_signatures=1
let g:multi_cursor_quit_key = '<Esc>'

if exists("NERDTreeTogge")
  map<C-o> :NERDTreeToggle<CR>
endif

let g:tmuxcomplete#trigger = 'omnifunc'

"autocmd FileType python setlocal completeopt-=preview
setlocal complete-=i
setlocal complete-=t
setglobal complete-=i
setglobal complete-=t
"setglobal complete-=u

if exists("NERDTree")
  autocmd VimEnter * NERDTree " open NERDTree on startup
  autocmd VimEnter * wincmd w " jump to active window on startup
  let NERDTreeShowHidden=1 " always show hidden files
endif

autocmd VimResized * wincmd *

autocmd FileType make set noexpandtab shiftwidth=8 softtabstop=0

set wildmenu
set wildmode=list:longest
"set wildmenu=longest:list,full
set wildignore+=*.o,*.obj,*~
set wildignore+=*vim/backups*

set history=1000
set diffopt+=vertical
set splitright

"set cc=80,100,120,150
set modelines=0
set gdefault

function! GenTags()
  let curPath = g:NERDTree.ForCurrentTab().getRoot().path.str()
  exec ':!ctags --extra=+f -R -f ' . curPath . '/tags ' . curPath
endfunction

nmap <silent> <leader>r :argdel *<CR>:bufdo argadd %<CR>:%bd<CR>:argdo e<CR><CR>:b 1<CR>

nmap <silent> <F1> :call GenTags()<CR>

if !empty(glob("~/.vim/bundle/nerdtree"))
  map<leader>o :NERDTreeToggle<CR>
else
  map<leader>o :Lex<CR>
endif

au InsertEnter * hi User1 ctermfg=232 ctermbg=166 guifg=#080808 guibg=#ffff00
au InsertLeave * hi User1 ctermfg=232 ctermbg=239 guifg=#adadad guibg=#4e4e4e

au InsertEnter * hi User0 ctermfg=232 ctermbg=166 guifg=black guibg=#ff0000
au InsertLeave * hi User0 ctermfg=232 ctermbg=239 guifg=black guibg=#5fff5f

au InsertEnter * hi User1 ctermfg=232 ctermbg=166 guifg=#080808 guibg=#ffff00 
au InsertLeave * hi User1 ctermfg=232 ctermbg=239 guifg=#adadad guibg=#4e4e4e 

au InsertEnter * hi statusline ctermfg=232 ctermbg=166 guifg=black guibg=#ff0000
au InsertLeave * hi statusline ctermfg=232 ctermbg=239 guifg=black guibg=#5fff5f

"hi statusline ctermfg=239 ctermbg=239 guifg=black guibg=#5fff5f

function! TrimWhiteSpace()
  let l:save = winsaveview()
  keeppatterns %s/\s\+$//e
  call winrestview(l:save)
endfunction

if exists("+showtabline")
	function! MyTabLine()
			let s = ''

      " loop over each tab page
      for i in range(tabpagenr('$'))
        if i + 1 == tabpagenr()
          let s .= '%#TabLineSel#'
        else
          let s .= '%#TabLine#'
        endif
        if i + 1 == tabpagenr()
          let s .= '%#TabLine#' "Wildmenu
        else
          let s .= '%#Title#'
        endif

        " set the tab page number (for mouse clicks)
        let s .= '%' . (i + 1) . 'T '
        " set page number string
        let s .= i + 1 . ''

        " get buffer names and statuses
        let n = ''   " tmp str for buf names
        let m = 0    " &modified number
        let c = 0    " &numbufs counter
        let targ = 0 " current buf num
        let buflist = tabpagebuflist(i + 1)
        let curBuf = fnamemodify(bufname(buflist[tabpagewinnr(i + 1) - 1]), ':t')

        " loop through each buffer in a tab
        for buf in buflist
          let temp = fnamemodify(bufname(buf), ':t')
          if (curBuf == temp)
            let targ = c
          endif
          if getbufvar(buf, "&modified")
            let m += 1
          endif
          let c += 1
        endfor

        let n .= fnamemodify(bufname(buflist[tabpagewinnr(i + 1) - 1]), ':t')
        let n = substitute(n, ', $', '', '')

        if c >= 2
          let n .= '(' . (targ+1) . '/' . c . ')'
        endif

        " add modified label
        if m > 0
          let s .= '+'
          " let s .= '[' . modifiedCounter . '+]'
        endif

        if i + 1 == tabpagenr()
          let s .= ' %#User1#'
        else
          let s .= ' %#TabLineSel#'
        endif

        " add buffer names
        if n == ''
          let s .= '[New]'
        else
          let s .= n
        endif

        " switch to no underlining and add final space
        let s .= ' '
      endfor

      let s .= '%#TabLineFill#%T'
      return s
    endfunction

    set showtabline=2
    set tabline=%!MyTabLine()
endif

" Status line
" default: set statusline=%f\ %h%w%m%r\ %=%(%l,%c%V\ %=\ %P%)
" Status Line Custom
let g:currentmode={
    \ 'n'      : 'Normal',
    \ 'no'     : 'Normal·Operator Pending',
    \ 'v'      : 'Visual',
    \ 'V'      : 'V·Line',
    \ "\<C-v>" : 'V·Block',
    \ 's'      : 'Select',
    \ 'S'      : 'S·Line',
    \ "\<C-s>" : 'S·Block',
    \ 'i'      : 'Insert',
    \ 'R'      : 'Replace',
    \ 'Rv'     : 'V·Replace',
    \ 'c'      : 'Command',
    \ 'cv'     : 'Vim Ex',
    \ 'ce'     : 'Ex',
    \ 'r'      : 'Prompt',
    \ 'rm'     : 'More',
    \ 'r?'     : 'Confirm',
    \ '!'      : 'Shell',
    \ 't'      : 'Terminal'
    \}

function! FileStatusSection()
  let line_info = ' '
  let cur_dir = getcwd()
  let cur_file = expand('%:e')
  let combined = strlen(cur_dir) + strlen(cur_file)

  if combined >= 79
    let line_info = ''
  else
    let line_info .= cur_dir . ' |'
  endif

  return line_info
endfunction

set laststatus=2
function! SetupStatusLine()
  set statusline=
  set statusline+=%0*\ %n\                                 " Buffer number
  "set statusline+=%1*\ %{getcwd()}\ \|                     " Work Dir
  set statusline+=%1*%{FileStatusSection()}                " Attemps to add Work Dir, otherwise nothing
  set statusline+=%1*\ %<%f%m%r%h%w\                       " File path, modified, readonly, helpfile, preview
  set statusline+=%1*\                                     " Reset
  set statusline+=%3*|                                     " Separator
  set statusline+=%2*\ %Y\                                 " FileType
  set statusline+=%3*|                                     " Separator
  set statusline+=%2*\ %{''.(&fenc!=''?&fenc:&enc).''}     " Encoding
  set statusline+=\ (%{&ff})                               " FileFormat (dos/unix..)
  set statusline+=%=                                       " Right Side
  set statusline+=%2*\ C:%02v                              " Column number
  set statusline+=%3*|                                     " Separator
  set statusline+=%1*\ %02l/%L\                            " Line number / total lines, percentage of document
  set statusline+=%0*\ %{toupper(g:currentmode[mode()])}\  " The current mode
endfunction

function! NoContext()
  set diffopt=filler,context:0
endfunction

autocmd BufEnter * call SetupStatusLine()
"call SetupStatusLine()


hi statusline ctermfg=232 ctermbg=239 guibg=#5fff5f guifg=black
hi tabline ctermfg=232 ctermbg=239 guibg=#5fff5f guifg=black
hi User0 ctermfg=232 ctermbg=239 guibg=#4e4e4e guifg=black
hi User1 ctermfg=239 ctermbg=239 guibg=#4e4e4e guifg=#adadad
hi User2 ctermfg=239 ctermbg=236 guibg=#303030 guifg=#adadad
hi User3 ctermfg=232 ctermbg=236 guibg=#303030 guifg=#303030
hi User4 ctermfg=232 ctermbg=239 guibg=#4e4e4e guifg=#4e4e4e

set clipboard=unnamedplus

set path+=**
" ▶
" ◀
set modelines=0
set gdefault
set undodir=~/.vim/undo/
set undofile

